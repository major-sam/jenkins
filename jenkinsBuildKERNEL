@Library("Default") _


PARRALEL_BUILD_SERVICES = ['Kernel','KernelWeb']
BUILDNAME = "Kernel"
GIT_SSH = "ssh://git@bitbucket.baltbet.ru:7999/bbp/server.git"
GIT_URL = "https://bitbucket.baltbet.ru:8445/scm/bbp/server.git"
BRANCH_LIST_URL = "https://bitbucket.baltbet.ru:8445/rest/api/1.0/projects/BBP/repos/server/branches?limit=1000&type=BRANCH"
NUGET_REPO = "http://dev-comp49/"
BRANCH = ""
txtFile = "branch.txt"
ISSUE_KEY = 'NWP-148' 
Release = false
DEFAULT_BRANCHES = ['release', 'master', 'develop', 'main', 'developV2']
CLONE_FOLDER = "jb"
BUILD_FILE = "Server.sln"
SLN_FOLDER = ".\\"
SLN_PATH = SLN_FOLDER  + BUILD_FILE
DEFAULT_BRANCH = "master"
PUBLISH_DIR =  "jenkinsBuild" + env.BUILD_NUMBER
//MSBUILD_PARAMS = ' /t:Build /p:Configuration=Release /v:n /p:DeployOnBuild=True /p:debug="full" /p:DefineConstants="publish" /p:PublishProfile="Production" '
MSBUILD_PARAMS = ' /t:Rebuild /p:Configuration=Test '
//PUBLISH_PARAMS = "/p:publishUrl=\".\\${PUBLISH_DIR}\" " 
OUTPUT_PARAMS = "/p:OutputPath=\"${PUBLISH_DIR}\" "
PUBLISH_PARAMS = "" 
NUGET_PARAMS = """ restore $SLN_PATH -Source "http://nuget.gkbaltbet.local/nuget" `
        -Source "https://api.nuget.org/v3/index.json" `
    	-Source "https://nuget.devexpress.com/dQholn9iJ89gaU1OHj227baJqIi9PubbsGLBb1KG7kCZc1hniY/api" `
    	-Source "\\\\server\\tcbuild\$\\!NEXT_Nuget_Packages\\Release" `
    	-Source "\\\\server\\tcbuild\$\\!Nuget-Packages-Archive" `
    	-Source "\\\\server\\tcbuild\$\\!NEXT_Nuget_Packages\\Release"	"""
DOTNET_PARAMS = """ restore $SLN_PATH --source "http://nuget.gkbaltbet.local/nuget" `
        --source "https://api.nuget.org/v3/index.json" `
    	--source "https://nuget.devexpress.com/dQholn9iJ89gaU1OHj227baJqIi9PubbsGLBb1KG7kCZc1hniY/api" `
    	--source "\\\\server\\tcbuild\$\\!NEXT_Nuget_Packages\\Release" `
    	--source "\\\\server\\tcbuild\$\\!Nuget-Packages-Archive" `
    	--source "\\\\server\\tcbuild\$\\!NEXT_Nuget_Packages\\Release"	"""


def parallelStagesMap = PARRALEL_BUILD_SERVICES.collectEntries {
    ["${it}" : generateStageFromPsScript(it)]
}
def generateStageFromPsScript(job) {
  return {
    stage (job){
      stage ("Pack and push ${job} artifact to nuget") {
       dir(job){
         nugetPackAndPush(
           buildname: job,
           release: Release,
           git_url: GIT_URL,
           nuget_repo: NUGET_REPO,
           branch: BRANCH,
           default_branches: DEFAULT_BRANCHES,
           dir: PUBLISH_DIR,
           issue: ISSUE_KEY
           )
        }   
      }
    }
  }
}



pipeline {
	agent { node { label 'build' }}
stages {
  stage ('Get Bitbucket branches') {
    steps {
      script {
	  // this step must be parametrized by tagged commit in hook
         cleanWs ()
         def map = bbRestApiBranches(creds:'118', branchListUrl:BRANCH_LIST_URL, txtFile:txtFile)
         BRANCH_COUNT = map.branchCount
         DEFAULT_BRANCH = map.defaultBranch
      }
    }
  }
   stage ('Set branch to build') {
    steps {
      script {
        BRANCH = chooseBranchToBuild(
          txtFile: txtFile, 
          branchCount: BRANCH_COUNT,
          defaultBranches: DEFAULT_BRANCHES
          )
        currentBuild.description = ISSUE_KEY
        if (BRANCH in DEFAULT_BRANCHES){
            Release = true
        }
      }
    }
  } 
  stage ("Checkout branch") {
    steps {
      checkoutBranch(
        creds: '118',
        branch:BRANCH, 
        gitUrl:GIT_URL, 
        cloneFolder:CLONE_FOLDER, 
        defaultBranch:DEFAULT_BRANCH
        )
    }
  }	
  stage ("Nuget restore") {
    steps {
      script {
        dir (CLONE_FOLDER) {
          powershell ( encoding:"UTF8", script:"nuget.exe ${NUGET_PARAMS}")
        }
      }
    }
  }
  stage (".Net restore") {	
    steps {
      script {
        dir (CLONE_FOLDER) {
          powershell ( encoding:"UTF8", returnStdout: 'true', script:" & 'C:\\Program Files\\dotnet\\dotnet.exe' ${DOTNET_PARAMS}")
        }
      }
    }
  }
//  stage ("Server.sln Restore") {	
//    steps {
//      script {
//        dir (CLONE_FOLDER) {
//         BUILD_FILE = "Server.sln"
//         expr = /& ${env.VS_MSBUILD_PATH} ${BUILD_FILE}  ${MSBUILD_PARAMS} ${OUTPUT_PARAMS} / 
//         echo expr
//         powershell ( encoding:"UTF8", returnStdout: 'true', script: expr)
//        }
//      }
//    }
//  }
  stage ("Build artifact Kernel") {
   steps {dir (CLONE_FOLDER) {
	script {
		CSPROJ_FOLDER = ".\\Kernel"
		CSPROJ_FILE = "Kernel.csproj"
		CSPROJ_PATH = CSPROJ_FOLDER +"\\" + CSPROJ_FILE 
                MSBUILD_PARAMS = " /t:Build /p:Configuration=Release /p:Version=${env.BUILD_NUMBER} "
	        expr = /& ${env.VS_MSBUILD_PATH} ${CSPROJ_FILE} ${MSBUILD_PARAMS} ${PUBLISH_PARAMS} ${OUTPUT_PARAMS}/ 
                echo expr
                dir(CSPROJ_FOLDER){
		  powershell ( encoding:"UTF8", returnStdout: 'true', script: expr)
                }
	}
   }}
  }
  stage ("Build artifact KernelWeb") {
   steps {dir (CLONE_FOLDER) {
	script {
		CSPROJ_FOLDER = ".\\KernelWeb"
		CSPROJ_FILE = "KernelWeb.csproj"
		CSPROJ_PATH = CSPROJ_FOLDER +"\\" + CSPROJ_FILE 
                MSBUILD_PARAMS = " /t:Build /p:Configuration=Release /p:Version=${env.BUILD_NUMBER} "
                expr = /& ${env.VS_MSBUILD_PATH} ${CSPROJ_FILE} ${MSBUILD_PARAMS} ${PUBLISH_PARAMS} ${OUTPUT_PARAMS}/ 
                echo expr
                dir(CSPROJ_FOLDER){
		  powershell ( encoding:"UTF8", returnStdout: 'true', script: expr)
                }
	}
   }}
  }
  stage('Parralell publish'){
    steps{  
      script {
        dir (CLONE_FOLDER) {
            parallel parallelStagesMap
        }    
      }
    }
  }
}
post {
  always {	
    alwaysBuild(
          default_branches: DEFAULT_BRANCHES,
          job: JOB_NAME,
          branch: BRANCH
          )
  //:  cleanWs (notFailBuild: true)
  }
  success {
        notifyJiraSuccses(
          issueKey:ISSUE_KEY,
          buildName: BUILDNAME ,
          nugetRepo: NUGET_REPO,
          release: Release,
          branch: BRANCH
          )
  }
  failure {
        notifyJiraFailure(
          issueKey:ISSUE_KEY,
          buildName: BUILDNAME
          )
    }
}}
