@Library("Default") _
import groovy.json.JsonSlurperClassic

scriptJson = libraryResource 'DeployTEST/scriptMap.json'
scriptMap = new JsonSlurperClassic().parseText(scriptJson)
nuggetTemp = "nuggetTemp"


def parallelStagesMapDeploy(items) {
    return items.collectEntries {  ["${it}" : generatePostDeploy(it)]  }
}

def generatePostDeploy(job) {
    return {
        stage("Renew params on: ${job}") {
            echo "PostDeploy_Stage ${job}"
            def fullpath= "DeployTEST/${job}"
            echo fullpath
                powershell(encoding: 'UTF8', script:"echo ${env:nugettemp}")
                powershell(encoding: 'UTF8', script:"${libraryResource fullpath}")
            
        }
        
    }
}


def parallelStagesMapPull(items) {
    return items.collectEntries {  ["${it}" : generateNugetInstall(it)]  }
}


def generateNugetInstall(job) {
    return {
        stage("Renew params on: ${job}") {
            if(job.startsWith('Unicom ')){
                echo 'UNICOM SKIPPED!'
                return
            }
            def id  = job.split(" ")[0]
            def version  = job.split(" ")[1]
            
            def nugetOutputDir = "${env.WORKSPACE}\\${nuggetTemp}"
            powershell (encoding: 'UTF8', script: "nuget install ${id} -Source ${env.nugetRepo} -PreRelease -version ${version} -x -OutputDirectory ${nugetOutputDir} -DependencyVersion Ignore")
        }
        
    }
}



def getProCut(Map config=[:]){
    def packetNames = config.packets.each{it.split(' ')[0]}
    def options =[]
    for (name in packetNames){
        options = options << string(name: name.split(' ')[0], defaultValue: "\$PACKAGE.FULL.VER-SI-ON", trim: true) 
    }    
    choosedPackgs = input message: "Put your packeges full names", ok: 'GO!' ,
        parameters : options
    return choosedPackgs.values()
}

def getTaskAndRelease(Map config=[:]){
    def result = []
    result += config.releasePackgs
    def Set lastTaskPackgs = []
    for (item in config.taskPackgs){
        String matcher = item.split(" ")[0] + " "
        config.releasePackgs.findAll { it.startsWith(matcher) }.each { 
            result -= it }
        lastTaskPackgs += config.releasePackgs.findAll {it.startsWith(matcher)}.first()
    }  
    result += lastTaskPackgs.asList()
    return result
} 

def generateParams(List packages){
    def result = []
    def Set options = []
    for (item in packages){
        String matcher = item.split(" ")[0] + " "
        options = options << packages.findAll {it.startsWith(matcher)}
    }  
    for (option in options){
        result = result << choice(name: option[0].split(' ')[0], choices: option)
    }
    return result 
}

def chooseTask(Map config=[:]){
    choosedPackgs = input message: "Choose Task ${params.Task} Packages", ok: 'GO!' ,
        parameters : generateParams(config.taskPackgs)
    return choosedPackgs.values()
}

stageAnswers = ["latest ${params.Task} Task pkgs over latest release", "I wanna choose ${params.Task} task pkgs", "Release", "I am PRO. I put it by myself"]

pipeline {
    
    parameters {
        booleanParam(name: 'Cleanup', defaultValue: false)
        choice(name:"TESTVM", choices: ["vm-n2-ws11", "vm-n2-ws12", "vm-n2-ws3", "vm-n2-ws2", "vm-n2-ws1"])
        string(name:'Task', defaultValue: "", trim: true)
    }
    agent {label "${TESTVM}" }
    stages{
        stage('Full CleanUp') {
            when{
                expression {
                    params.Cleanup
                }
            }
            steps {withEnv(["jenkinsWorkspace=${env.Workspace}"]) {
                powershell(encoding:'UTF-8', script:"${libraryResource 'DeployTEST/preDeployCleanup.ps1'}")
            }}
        }       
        stage('Get packet list from nuget'){
            steps{
                echo "latestPacks какбы костыль пока не наберется полный список релизных пакетов. Но есть вероятность появления нового пакетта не сбилженого с релизной ветки"
                script{
                    powershell(encoding:'UTF-8', script:"nuget list -Source ${env.nugetRepo} |set-content  release_packgs")
                    powershell(encoding:'UTF-8', script:"nuget list ${params.Task} -Source ${env.nugetRepo} -PreRelease -allversions |set-content task_packgs" ) 
                    powershell(encoding:'UTF-8', script:"nuget list -Source ${env.nugetRepo} -PreRelease |set-content latest_packgs" ) 
                    
                    releasePackgs =  Arrays.asList(readFile(file: 'release_packgs', encoding: 'UTF-8').toString().split("\\r\\n"))
                    taskPackgs =  Arrays.asList(readFile(file: 'task_packgs', encoding: 'UTF-8').toString().split("\\r\\n"))
                    latestPackgs =  Arrays.asList(readFile(file: 'latest_packgs', encoding: 'UTF-8').toString().split("\\r\\n"))
    
                }
            }
        } 
        stage('Form Bundle'){
            steps{
                script{
					opts = []
					opts += stageAnswers 
					if (!("${params.Task}" =~ /^[a-zA-Z]{3}-\d+$/)){
						opts = opts.drop(2)
					}
                    while(true){
						Destiny = input message: 'Choose  your destiny', ok: 'GO!' ,
							parameters: [
								choice(name:"Destiny", choices: opts)
							]
						releaseBundle = []
						echo Destiny
						try{
							switch(Destiny){
								case(stageAnswers[0]):
									releaseBundle = getTaskAndRelease(taskPackgs:taskPackgs,releasePackgs:latestPackgs)
									break
								case(stageAnswers[1]):
									releaseBundle = chooseTask(taskPackgs:taskPackgs,releasePackgs:latestPackgs)
									break
								case(stageAnswers[2]):
									releaseBundle = latestPackgs
									break
								case(stageAnswers[3]):
									releaseBundle = getProCut(packets:latestPackgs)
									break
								default:
									echo "wrong answer"
							}
							println releaseBundle
							if (releaseBundle != -1){
								break
							}
						}
						catch(errr){
							println(errr)
							continue
						}
					}
                }
				println "Release Bundle: " + releaseBundle
            }
        }
        stage('Pull packages'){
            steps{
                script {
                    parallel parallelStagesMapPull(releaseBundle)
                }
            }
        }
        stage ('Post Deploy'){
            steps{
                script {
                    println scriptMap
                    def nugetdir = "${env.WORKSPACE}\\${nuggetTemp}"
                    echo nugetdir
                    withEnv(["nugettemp=${nugetdir}"]){
                        parallel parallelStagesMapDeploy(scriptMap.scripts)
                    }
                }
            }
        }
        stage ('TESTS'){
            when{
                expression {
                    false
                }
            }
            steps {
                echo "TESTS"
            }
        }
    }
}
