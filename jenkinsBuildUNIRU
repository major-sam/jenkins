@Library("Default") _


serviceScripts = ['Uniru','UniruWebApi']
BUILDNAME = "Uniru"
GIT_URL = "https://bitbucket.baltbet.ru:8445/scm/bbp/ClientWorkPlace.git"
GIT_SSH = "ssh://git@bitbucket.baltbet.ru:7999/bbp/clientworkplace.git"
NUGET_REPO = "http://dev-comp49/"
BRANCH_LIST_URL ="https://bitbucket.baltbet.ru:8445/rest/api/1.0/projects/BBP/repos/ClientWorkPlace/branches?limit=1000&type=BRANCH"
BRANCH = "branch"
txtFile = "branch.txt"
ISSUE_KEY = 'NWP-148' 
Release = false
DEFAULT_BRANCHES = ['release', 'master', 'develop', 'main']
SLN_FILE = "ClientWorkspace.sln"
SLN_FOLDER = ".\\"
SLN_PATH = SLN_FOLDER  + SLN_FILE
CLONE_FOLDER = "jb"
CSPROJ_FILE = "Web.ClientWorkspace.csproj"
CSPROJ_FOLDER = "Web.ClientWorkspace"
CSPROJ_PATH = ".\\" + CSPROJ_FOLDER +"\\" + CSPROJ_FILE
DEFAULT_BRANCH = ""
PUBLISH_DIR = "jenkinsBuild" + env.BUILD_NUMBER 
PUBLISH_PARAMS = " /p:publishUrl=\".\\${PUBLISH_DIR}\" "
OUTPUT_PARAMS = " /p:OutputPath=\"${PUBLISH_DIR}\" " 
MSBUILD_PARAMS = " /t:Build /p:Configuration=Release /v:n /p:DeployOnBuild=True /p:debug='full' "
NUGET_PARAMS = """ restore $SLN_PATH -NoCache  -Source "http://nuget.gkbaltbet.local/nuget" `
        -Source "https://api.nuget.org/v3/index.json" `
    	-Source "https://nuget.devexpress.com/dQholn9iJ89gaU1OHj227baJqIi9PubbsGLBb1KG7kCZc1hniY/api" `
    	-Source "\\\\server\\tcbuild\$\\!NEXT_Nuget_Packages\\Release" `
    	-Source "\\\\server\\tcbuild\$\\!Nuget-Packages-Archive" `
    	-Source "\\\\server\\tcbuild\$\\!NEXT_Nuget_Packages\\Release"	"""
DOTNET_PARAMS = """ restore $SLN_PATH --source "http://nuget.gkbaltbet.local/nuget" `
        --source "https://api.nuget.org/v3/index.json" `
    	--source "https://nuget.devexpress.com/dQholn9iJ89gaU1OHj227baJqIi9PubbsGLBb1KG7kCZc1hniY/api" `
    	--source "\\\\server\\tcbuild\$\\!NEXT_Nuget_Packages\\Release" `
    	--source "\\\\server\\tcbuild\$\\!Nuget-Packages-Archive" `
    	--source "\\\\server\\tcbuild\$\\!NEXT_Nuget_Packages\\Release"	"""
		
def parallelStagesMap = serviceScripts.collectEntries {
    ["${it}" : generateStageFromPsScript(it)]
}
def generateStageFromPsScript(job) {
  return {
    stage (job){
      stage ("Pack and push ${job} artifact to nuget") {

       dir(job){
         nugetPackAndPush(
           buildname: job,
           release: Release,
           git_url: GIT_URL,
           nuget_repo: NUGET_REPO,
           branch: BRANCH,
           default_branches: DEFAULT_BRANCHES,
           dir: PUBLISH_DIR
           )
        }   
      //  script {
      //  	//TODO IN MULTIBRANCH NEEDS TO REPLACE
      //      commitMsg = (powershell ( encoding:"UTF8", returnStdout: 'true', script:"git log -1 --pretty=%B | ? {\$_.trim() -ne ''}")).trim()
      //  	//TODO IN MULTIBRANCH NEEDS TO REPLACE
      //      commitHash = (powershell ( encoding:"UTF8", returnStdout: 'true', script:"git log -1 --pretty=%H | ? {\$_.trim() -ne ''}")).trim()
      //      BUILD_TRIGGER_BY = ("${currentBuild.getBuildCauses ()[0].shortDescription} / ${currentBuild.getBuildCauses ()[0].userId}").replace("Started by user ","").replace("\\s*","\\")
      //  	nugetVersion = (env.BUILD_NUMBER + "-" +BRANCH).replace("/","-")
      //      dir (job) { dir (PUBLISH_NAME){
      //          writeFile ( file: "nuget.nuspec", encoding:"UTF8", text: """<?xml version="1.0" encoding="utf-8"?>
      //          <package xmlns="http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd">
      //            <metadata>
      //              <id>${job}</id>
      //              <version>1.0.${nugetVersion}</version>
      //              <description>
      //          	  ${commitMsg}. 
      //                Git hash: ${commitHash}
      //          	</description>
      //              <authors>${BUILD_TRIGGER_BY} by Jenkins</authors>
      //              <repository type="git" url="${GIT_URL}" branch="${BRANCH}" commit="${commitHash}" />
      //          		<frameworkAssemblies>
      //                <frameworkAssembly assemblyName="System.Web" targetFramework="net40" />
      //                <frameworkAssembly assemblyName="System.Net" targetFramework="netcoreapp3.1" />
      //              </frameworkAssemblies>
      //          	<tags>${BRANCH} ${commitHash}</tags>
      //            </metadata>
      //          </package>""")
      //          powershell ( encoding:"UTF8", script:"nuget pack")
      //  	if((BRANCH ==~ env.BRANCH_REGEX ) ||(BRANCH in DEFAULT_BRANCHES)){
      //  		powershell ( encoding:"UTF8", script:"nuget push *.nupkg -Source ${NUGET_REPO} -ApiKey ${env.NuggetGalleryApiKey}")
      //  	}else{
      //  		catchError(message: "Invalid branch naming ${BRANCH}. NO NUGET PUSH, NO JIRA PUSH", buildResult: 'UNSTABLE', stageResult: 'UNSTABLE'){
      //  			error ("Invalid branch naming ${BRANCH}. NO NUGET PUSH, NO JIRA PUSH")  }
      //  	}
      //  	url = 'https://dev-comp49/packages/' + job + '/' +  "1.0.${nugetVersion}"
      //  	currentBuild.description = currentBuild.description + "<br>${job}"+' <a href="' + url + '">link</a>  to artifact in nuget gallery'
      //  	}}
      //  }
      }
    }
  }
}


pipeline {
	agent { node { label 'build' }}
stages {
  stage ('Get Bitbucket branches') {
    steps {
	  // this step must be parametrized by tagged commit in hook
      cleanWs ()
      bbRestApiBranches(creds:'118', BRANCH_LIST_URL:BRANCH_LIST_URL, txtFile:txtFile)
    }
  }
  stage ('Set branch to build') {
    steps {
      script {
        BRANCH = chooseBranchToBuild(txtFile: txtFile)
        currentBuild.description = ISSUE_KEY
      }
    }
  } 
  stage ("Checkout branch") {
    steps {
      checkoutBranch(creds: '118', BRANCH:BRANCH, GIT_URL:GIT_URL, CLONE_FOLDER:CLONE_FOLDER)
    }
  }	
  stage ("Nuget restore") {
    steps {
      script {
        dir (CLONE_FOLDER) {
		  // command for output debug command line example	
          //powershell ( encoding:"UTF8", script:"write-host nuget.exe ${NUGET_PARAMS}")
          powershell ( encoding:"UTF8", script:"nuget.exe ${NUGET_PARAMS}")
        }
      }
    }
  }
  stage (".Net restore") {	
    steps {
      script {
        dir (CLONE_FOLDER) {
          powershell ( encoding:"UTF8", returnStdout: 'true', script:" & 'C:\\Program Files\\dotnet\\dotnet.exe' ${DOTNET_PARAMS}")
        }
      }
    }
  }
  stage ("Build artifact Uniru") {
        steps {script {dir (CLONE_FOLDER) {
			MSBUILD_CONST = ' /p:DefineConstants=\"cps;publish;;\" /p:PublishProfile=\"Production\" '
            expr = SLN_PATH +  MSBUILD_PARAMS + PUBLISH_PARAMS + OUTPUT_PARAMS + MSBUILD_CONST
            powershell ( encoding:"UTF8", returnStdout: 'true', script:'& \'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools\\MSBuild\\Current\\Bin\\MSBuild.exe\' ${expr}')
        }}}
      }
  stage ("Build artifact UniruWebApi") {
    steps {script {dir (CLONE_FOLDER) {
		MSBUILD_CONST = ' /p:DefineConstants=\"cps;publish;disable_warmup;webapi;enable_swagger\" /p:PublishProfile=\"Production\" '
        expr = SLN_PATH +  MSBUILD_PARAMS + PUBLISH_PARAMS + OUTPUT_PARAMS + MSBUILD_CONST
        powershell ( encoding:"UTF8", returnStdout: 'true', script:'& \'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools\\MSBuild\\Current\\Bin\\MSBuild.exe\' ${expr}')
    }}}
  }
  stage('Parralell push'){
    steps{  
      script {
        dir (CLONE_FOLDER) {
            parallel parallelStagesMap
        }    
      }
    }
  }
}
post {
  always {	
    alwaysBuild(
          default_branches: DEFAULT_BRANCHES,
          job: JOB_NAME,
          branch: BRANCH
          )

  }
  success {
        notifyJiraSuccses(
          issueKey:ISSUE_KEY,
          buildName: BUILDNAME ,
          nugetRepo: NUGET_REPO,
          release: Release,
          branch: BRANCH
          )
  }
  failure {
        notifyJiraFailure(
          issueKey:ISSUE_KEY,
          buildName: BUILDNAME
          )
    }
}}
