@Library("Default") _


serviceScripts = ['Uniru','UniruWebApi']
BUILDNAME = "Uniru"
GIT_URL = "https://bitbucket.baltbet.ru:8445/scm/bbp/ClientWorkPlace.git"
GIT_SSH = "ssh://git@bitbucket.baltbet.ru:7999/bbp/clientworkplace.git"
NUGET_REPO = "http://dev-comp49/"
BRANCH_LIST_URL ="https://bitbucket.baltbet.ru:8445/rest/api/1.0/projects/BBP/repos/ClientWorkPlace/branches?limit=1000&type=BRANCH"
BRANCH = "branch"
txtFile = "branch.txt"
ISSUE_KEY = 'NWP-148' 
Release = false
DEFAULT_BRANCHES = ['release', 'master', 'develop', 'main']
SLN_FILE = "ClientWorkspace.sln"
SLN_FOLDER = ".\\"
SLN_PATH = SLN_FOLDER  + SLN_FILE
CLONE_FOLDER = "jb"
CSPROJ_FILE = "Web.ClientWorkspace.csproj"
CSPROJ_FOLDER = "Web.ClientWorkspace"
CSPROJ_PATH = ".\\" + CSPROJ_FOLDER +"\\" + CSPROJ_FILE
DEFAULT_BRANCH = ""
PUBLISH_DIR = "jenkinsBuild" + env.BUILD_NUMBER 
PUBLISH_PARAMS = " /p:publishUrl=\".\\${PUBLISH_DIR}\" "
MSBUILD_PARAMS = " /t:Build /p:Configuration=Release /v:n /p:DeployOnBuild=True /p:debug='full' "
NUGET_PARAMS = """ restore $SLN_PATH -NoCache  -Source "http://nuget.gkbaltbet.local/nuget" `
        -Source "https://api.nuget.org/v3/index.json" `
    	-Source "https://nuget.devexpress.com/dQholn9iJ89gaU1OHj227baJqIi9PubbsGLBb1KG7kCZc1hniY/api" `
    	-Source "\\\\server\\tcbuild\$\\!NEXT_Nuget_Packages\\Release" `
    	-Source "\\\\server\\tcbuild\$\\!Nuget-Packages-Archive" `
    	-Source "\\\\server\\tcbuild\$\\!NEXT_Nuget_Packages\\Release"	"""
DOTNET_PARAMS = """ restore $SLN_PATH --source "http://nuget.gkbaltbet.local/nuget" `
        --source "https://api.nuget.org/v3/index.json" `
    	--source "https://nuget.devexpress.com/dQholn9iJ89gaU1OHj227baJqIi9PubbsGLBb1KG7kCZc1hniY/api" `
    	--source "\\\\server\\tcbuild\$\\!NEXT_Nuget_Packages\\Release" `
    	--source "\\\\server\\tcbuild\$\\!Nuget-Packages-Archive" `
    	--source "\\\\server\\tcbuild\$\\!NEXT_Nuget_Packages\\Release"	"""
		
def parallelStagesMap = serviceScripts.collectEntries {
    ["${it}" : generateStageFromPsScript(it)]
}
def generateStageFromPsScript(job) {
  return {
    stage (job){
      stage ("Pack and push ${job} artifact to nuget") {
		nugetPackAndPush(
			buildname: job,
			release: Release,
			git_url: GIT_URL,
			nuget_repo: NUGET_REPO,
			branch: BRANCH,
			default_branches: DEFAULT_BRANCHES,
			dir: job + PUBLISH_DIR,
			issue: ISSUE_KEY
		)  
      }
    }
  }
}


pipeline {
	agent { node { label 'build' }}
stages {
  stage ('Get Bitbucket branches') {
    steps {
      script {
	  // this step must be parametrized by tagged commit in hook
         cleanWs ()
         echo BRANCH_LIST_URL
         def map = bbRestApiBranches(creds:'118', branchListUrl:BRANCH_LIST_URL, txtFile:txtFile)
         BRANCH_COUNT = map.branchCount
         DEFAULT_BRANCH = map.defaultBranch
      }
    }
  }
  stage ('Set branch to build') {
    steps {
      script {
        BRANCH = chooseBranchToBuild(
          txtFile: txtFile, 
          branchCount: BRANCH_COUNT,
          defaultBranches: DEFAULT_BRANCHES
          )
        currentBuild.description = ISSUE_KEY
      }
    }
  } 
  stage ("Checkout branch") {
    steps {
      checkoutBranch(
        creds: '118',
        branch:BRANCH, 
        gitUrl:GIT_URL, 
        cloneFolder:CLONE_FOLDER, 
        defaultBranch:DEFAULT_BRANCH
        )
    }
  }	
  stage ("Nuget restore") {
    steps {
      script {
        dir (CLONE_FOLDER) {
          powershell ( encoding:"UTF8", script:"nuget.exe ${NUGET_PARAMS}")
        }
      }
    }
  }
  stage (".Net restore") {	
    steps {
      script {
        dir (CLONE_FOLDER) {
          powershell ( encoding:"UTF8", returnStdout: 'true', script:" & 'C:\\Program Files\\dotnet\\dotnet.exe' ${DOTNET_PARAMS}")
        }
      }
    }
  }
  stage ("Build artifact Uniru") {
    steps {
		script {dir (CLONE_FOLDER) {
			MSBUILD_CONST = " /p:PublishProfile=\"Production\" \"/p:DefineConstants=`\"cps;publish;;`\"\" "
			PUBLISH_PARAMS = " /p:publishUrl=\"${env.WORKSPACE}\\${CLONE_FOLDER}\\Uniru${PUBLISH_DIR}\" "
			expr = /& ${env.VS_MSBUILD_PATH} ${SLN_FILE} ${MSBUILD_PARAMS} ${PUBLISH_PARAMS} ${MSBUILD_CONST}/ 
			echo expr
            powershell ( encoding:"UTF8", returnStdout: 'true', script:expr)
        }}
	}
      }
  stage ("Build artifact UniruWebApi") {
    steps {
		script {dir (CLONE_FOLDER) {
			MSBUILD_CONST =  " /p:PublishProfile=\"Production\" \"/p:DefineConstants=`\"cps;publish;disable_warmup;webapi;enable_swagger`\"\" "
			PUBLISH_PARAMS = " /p:publishUrl=\"${env.WORKSPACE}\\${CLONE_FOLDER}\\UniruWebApi${PUBLISH_DIR}\" "
			expr = /& ${env.VS_MSBUILD_PATH} ${SLN_FILE} ${MSBUILD_PARAMS} ${PUBLISH_PARAMS} ${MSBUILD_CONST}/ 
			echo expr
			powershell ( encoding:"UTF8", returnStdout: 'true', script:expr)
		}}
	}
  }
  stage('Parralell push'){
    steps{  
      script {
        dir (CLONE_FOLDER) {
            parallel parallelStagesMap
        }
      }
    }
  }
}
post {
  always {	
    alwaysBuild(
          default_branches: DEFAULT_BRANCHES,
          job: JOB_NAME,
          branch: BRANCH
          )

  }
  success {
        notifyJiraSuccses(
          issueKey:ISSUE_KEY,
          buildName: BUILDNAME ,
          nugetRepo: NUGET_REPO,
          release: Release,
          branch: BRANCH
          )
  }
  failure {
        notifyJiraFailure(
          issueKey:ISSUE_KEY,
          buildName: BUILDNAME
          )
    }
}}
